setwd("C:/University/Uni Maastricht/Smart Service  Project/Data Analysis")
require(data.table)
require(dplyr)
require(lubridate)


#load("Workspace DataPrep.RData")
#save.image("Workspace DataPrep.RData")

#### Build Dataframes #### 

#field_list <- fread('Alphabetical_Field_List.csv')
installed_base <- fread('Installed_Based.csv',header = T)
service_notification <- fread('Service_Notification_Data.csv',header = T)
service_order <- fread('Service_Order_History.csv', header= T)

installed_base$V1 <- NULL
service_notification$V1 <- NULL
service_order$V1 <- NULL 

#### installed_based_df #### 

#equipment statuses as T/F

#installed_base$`Equipment Status Delivery Note` <- ifelse(installed_base$`Equipment Status Delivery Note`=='X',1,0)
#installed_base$`Equipment Status Customer Site` <- ifelse(installed_base$`Equipment Status Customer Site`=='X',1,0)
#installed_base$`Equipment Status Available` <- ifelse(installed_base$`Equipment Status Available`=='X',1,0)
#installed_base$`Equipment Status Warehouse` <- ifelse(installed_base$`Equipment Status Warehouse`=='X',1,0)
#installed_base$`Equipment Status Inactive` <- ifelse(installed_base$`Equipment Status Inactive`=='X',1,0)

#date columns 
installed_base$`Installation Date` <- as.Date(installed_base$`Installation Date`, "%m/%d/%Y")
installed_base$`Last Goods Movement Date` <- as.Date(installed_base$`Last Goods Movement Date`, "%m/%d/%Y")

#factorial columns 
#TODO add levels where needed

installed_base$`Last Service Order Type` <- as.factor(installed_base$`Last Service Order Type`)
installed_base$`Stock Type` <- as.factor(installed_base$`Stock Type`)
installed_base$`Stock Type Text` <- as.factor(installed_base$`Stock Type Text`)
installed_base$`Stock Status` <- as.factor(installed_base$`Stock Status`)

#remove unnecessary columns
installed_base$`Service Relevancy` <- NULL
installed_base$`Stock Type`<- NULL
installed_base$`Equipment Status Delivery Note` <- NULL
installed_base$`Equipment Status Customer Site` <- NULL
installed_base$`Equipment Status Available` <- NULL
installed_base$`Equipment Status Warehouse` <- NULL
installed_base$`Equipment Status Inactive` <- NULL
installed_base$`Serial Number` <- NULL


#### service_order ####

#remove unnecessary columns
service_order$`Serial Number` <- NULL
service_order$`Service Type` <- NULL


#factorial columns
service_order$`Service Order Type`<- as.factor(service_order$`Service Order Type`)
service_order$`Maintenance Activity Type`<- as.factor(service_order$`Maintenance Activity Type`)
service_order$`Notification Type`<- as.factor(service_order$`Notification Type`)
service_order$`Sales Org`<- as.factor(service_order$`Sales Org`)
service_order$`Service Location`<- as.factor(service_order$`Service Location`)
service_order$`Maintenance Activity Type Description` <- as.factor(service_order$`Maintenance Activity Type Description`)

#Date column

service_order$`Service Order Creation Date` <- as.Date(service_order$`Service Order Creation Date`, "%Y-%m-%d")



#### service_notification_data ####

#remove unnecessary columns
service_notification$`Material Pricing Group`<- NULL
service_notification$`Notification Damage Code 1`<- NULL
service_notification$`Notification Damage Code 2`<- NULL
service_notification$`Notification Damage Code 3`<- NULL
service_notification$`Notification Cause Code 3`<- NULL
service_notification$`Notification Cause Code 2`<- NULL
service_notification$`Notification Cause Code 1`<- NULL

service_notification$`Notification User Status`<- NULL
service_notification$`Notification Work Center`<- NULL
service_notification$`Planning Plant`<- NULL
service_notification$`Profit Center` <- NULL
service_notification$`Serial Number` <- NULL

# date column 

service_notification$`Notification Creation Date` <- as.Date(service_notification$`Notification Creation Date`, '%m/%d/%Y')



# Count Service Orders by Equipment Number

Count_SOs <- service_order %>% 
  group_by(`Equipment Number`) %>%
  summarise(count=n()) 

# Merge service notification and order 

Services <- service_notification %>%
  left_join(service_order, by ='Notification Number')

days_between_Notification_ServiceOrder <- Services$`Notification Creation Date`-Services$`Service Order Creation Date`


# Create Table including installed base 

# Create Repairs/Notifications per Month 

"First retrieve last service order" 

LastServiceOrder <- Services %>% 
  group_by(`Equipment Number.x`) %>%
  summarize(LastServiceOrder = max(`Service Order Creation Date`))

installed_base <- installed_base %>% left_join(LastServiceOrder, by= c('Equipment Number' = 'Equipment Number.x'))
installed_base$lifetime <- (max(installed_base$LastServiceOrder, na.rm = TRUE) - installed_base$`Installation Date`)/365
installed_base <- installed_base %>% left_join(Count_SOs) 
installed_base$SOperYear <- installed_base$count / as.numeric(installed_base$lifetime) 


# Retrieve unique materials and codes for repairs needed 

UniqueMaterialsCodes <- Services %>% 
  group_by(`Equipment Description`) %>%
  summarize(uniqueMaterials = length(unique(`Material Description`)), 
            uniqueCauseCode1 = length(unique(`Notification Cause Code 1 Description`)), 
            uniqueCauseCode2 = length(unique(`Notification Cause Code 2 Description`)), 
            uniqueCauseCode3 = length(unique(`Notification Cause Code 3 Description`)),
            RepairComplexity = sum(uniqueMaterials, uniqueCauseCode1, uniqueCauseCode2, uniqueCauseCode3))

# Create complexity df 

RepairComplexity <- UniqueMaterialsCodes %>% select("Equipment Description", "RepairComplexity") 


# Select only the data where Installation Date is available 

completecases <- installed_base[complete.cases(installed_base[,5]),]

completecases <- filter(completecases, `Installation Date` > '1980-02-01')

##delete duplicate columns
Services$`Equipment Number.y` <- NULL
Services$`Service Order Number.y` <- NULL
Services$`Sold To.y` <- NULL
Services$`Notification Type.y` <- NULL
Services$`Model Number.y` <- NULL
Services$`Material Number.y` <- NULL

#renamed column for join
names(Services)[names(Services) == "Equipment Number.x"] <- "Equipment Number"

#join services and installed_base
df <- Services %>%
  left_join(completecases, by = 'Equipment Number')

#delete duplicate columns in df
df$`Equipment Description.y` <- NULL
df$`Equipment Number.y` <- NULL
df$`Service Order Number.y`<- NULL
df$`Sold To.y` <- NULL
df$`Notification Type.y` <- NULL
df$`Model Number.y` <- NULL
df$`Material Number.y` <- NULL

##complete df for clustering
df <- df[complete.cases(df[,40]),]

#rename colums
names(df)[names(df) == "Sold To.x"] <- "Sold To"
names(df)[names(df) == "Equipment Description.x"] <- "Equipment Description"
names(df)[names(df) == "Material Number.x"] <- "Material Number"
names(df)[names(df) == "Model Number.x"] <- "Model Number"
names(df)[names(df) == "Notification Type.x"] <- "Notification Type"
names(df)[names(df) == "Service Order Number.x"] <- "Service Order Number"


## Create Clustering df cl_df ##
cl_df = df[ , c("Equipment Number", "Material Pricing Group Description", "Service Order Type", "Service Location", "Maintenance Activity Type", "Equipment Description", "SOperYear")]

'Bind complexity information'

cl_df <- cl_df %>% left_join(RepairComplexity, by = 'Equipment Description')

cl_df$`Equipment Number` <- as.factor(cl_df$`Equipment Number`)
cl_df$`Material Pricing Group Description` <- as.factor(cl_df$`Material Pricing Group Description`)
cl_df$`Equipment Description` <- as.factor(cl_df$`Equipment Description`)
